---
format: html
editor: visual
---

```{r}
library(ggplot2)
```

Cargar los datos en un dataframe llamado: airbnb

```{r}
airbnb<-read.csv('data//airbnb.csv',sep = ',', stringsAsFactors = T)
head(airbnb)
```

Mostrar las primeras 6 filas del dataframe

```{r}
head(airbnb, n = 6)
```

Renombrar las columnas de la siguiente forma:

| Nombre original        | Nuevo nombre   |
|------------------------|----------------|
| Zipcode                | CodigoPostal   |
| Neighbourhood.Cleansed | Barrio         |
| Property.Type          | TipoPropiedad  |
| Room.Type              | TipoAlquiler   |
| Accommodates           | MaxOcupantes   |
| Bathrooms              | NumBanyos      |
| Bedrooms               | NumDormitorios |
| Beds                   | NumCamas       |
| Bed.Type               | TipoCama       |
| Amenities              | Comodidades    |
| Square.Feet            | PiesCuadrados  |
| Price                  | Precio         |
| Review.Scores.Rating   | Puntuacion     |

```{r}
newnames<-c("CodigoPostal","Barrio","TipoPropiedad","TipoAlquiler","MaxOcupantes","NumBanyos",
"NumDormitorios","NumCamas","TipoCama","Comodidades","PiesCuadrados","Precio","Puntuacion")

```

```{r}
colnames(airbnb) <- newnames #nombre en espqanol de las columnas
head(airbnb) #comprobacion de las nuevos nombres de las columnas
```

```{r}
colnames(airbnb)

```

Crea una nueva columna llamada MetrosCuadrados a partir de la columna PiesCuadrados.

```{r}
# El dataset inicial es "airbnb" pero voy a hacer modificaciones iniciales asi que me copio en uno llamado "df"
df <- airbnb
# La nueva columna"MetrosCuadrados" se inicia con NA 
df$MetrosCuadrados <- NA 
# ver las columnas
colnames(df)
head(df$PiesCuadrados, n = 5)

```

Ayuda: 1 pie cuadrado son 0,092903 metros cuadrdados

```{r}

# cambiar la columna PiesCuadrados, usando la contante de la ayuda
df$MetrosCuadrados <- df$PiesCuadrados * 0.092903
# ver las columnas
colnames(df)
head(df$MetrosCuadrados, n = 5) # tengo que tener NA y 538*0.092903 
```

Miremos el código postal. Es una variable con entradas erroneas. Hay valores como '','-' y '28' que **deberían ser considerados como NA**. Así mismo también debería ser NA todos los que no compiencen por 28, ya que estamos con códigos postales de Madrid **notebook1**

El código postal 28002, 28004 y 28051 tienen entradas repetidas. Por ejemplo las entradas 28002\n20882 deberían ir detro de 28002

El codigo 2804 debería ser 28004, 2805 deberia ser 28005 y 2815 juncto con 2815 debería ser 28015

Limpia los datos de la columna Codigo Postal

```{r}
# Reemplaza los valores vacíos, '-', y valores que no comienzan con '28' por NA
df$CodigoPostal[df$CodigoPostal == '' | df$CodigoPostal == '-' | !grepl("^28", df$CodigoPostal)] <- NA

# Corrige códigos postales específicos
#df$CodigoPostal <- gsub("^2804$", "28004", df$CodigoPostal)
#df$CodigoPostal <- gsub("^2805$", "28005", df$CodigoPostal)
#df$CodigoPostal <- gsub("^2815$", "28015", df$CodigoPostal)

# Dividir códigos postales con '\n' y mantener solo el primero
#df$CodigoPostal <- gsub("\n.*", "", df$CodigoPostal)
df$CodigoPostal[df$CodigoPostal=='28002\n28002']<-'28002'
df$CodigoPostal[df$CodigoPostal=='28051\n28051']<-'28051'
df$CodigoPostal[df$CodigoPostal=='Madrid 28004']<-'28004'


df$CodigoPostal[df$CodigoPostal=='2804']<-'28004'
df$CodigoPostal[df$CodigoPostal=='2805']<-'28005'
df$CodigoPostal[df$CodigoPostal=='2815']<-'28015'
df$CodigoPostal[df$CodigoPostal=='2015']<-'28015'

df$CodigoPostal <- gsub('[^(28)]\\d{3}', NA, df$CodigoPostal)
# Convierte la columna "CodigoPostal" en factor para representar las categorías limpias
df$CodigoPostal <- as.factor(df$CodigoPostal)

# Visualiza las primeras filas del dataframe para verificar los cambios
head(df)

```

Una vez limpios los datos ¿Cuales son los códigos postales que tenemos?

```{r}
print(length(unique(df$CodigoPostal)))
```

¿Cuales son los 5 códigos postales con más entradas? ¿Y con menos? ¿Cuantas entradas tienen?

```{r}
codigopostal_counts <- sort(table(df$CodigoPostal), decreasing = TRUE)
#¿Cuales son los 5 códigos postales con más entradas?
head(codigopostal_counts, n = 5)
#¿Y con menos? 
tail(codigopostal_counts, n = 5)

```

¿Cuales son los barrios que hay en el código postal 28012?

```{r}
#filtro_cod_postal = df$CodigoPostal=="28012"
#print(sum(na.omit(filtro_cod_postal)))
filtro_cod_postal <- !is.na(df$CodigoPostal) & df$CodigoPostal == "28012"
#print((filtro_cod_postal))
#print(unique(df$Barrio))
barrios <- unique(df$Barrio[filtro_cod_postal])
print(barrios)

```

¿Cuantas entradas hay en cada uno de esos barrios para el codigo postal 28012?

```{r}
# Filtrar las entradas con código postal 28012
airbnb_28012 <- df[df$CodigoPostal == '28012', ]

# Convertir la columna "Barrio" en factor
airbnb_28012$Barrio <- factor(airbnb_28012$Barrio)

# Contar las entradas en cada barrio para el código postal 28012
barrios_count <- table(airbnb_28012$Barrio)

# Mostrar el resultado
barrios_count

```

¿Cuantos barrios hay en todo el dataset airbnb? ¿Cuales son?

```{r}
# total unicos
print(length(unique(df$Barrio)))
# barrios
#print(unique(df$Barrio))

```

¿Cuales son los 5 barrios que tienen mayor número entradas?

```{r}
Barrio_counts <- sort(table(df$Barrio), decreasing = TRUE)
#print(Barrio_counts)
#¿Cuales son los 5 códigos barrios con más entradas?
head(Barrio_counts, n = 5)
```

¿Cuantos Tipos de Alquiler diferentes hay? ¿Cuales son? ¿Cuantas entradas en el dataframe hay por cada tipo?

```{r}
alq_counts <- table(df$TipoAlquiler)
print(length(alq_counts))
print(alq_counts)
```

Muestra el diagrama de cajas del precio para cada uno de los diferentes Tipos de Alquiler

```{r}
library(ggplot2)
library(gridExtra)


# 3 variables con los datos de cada tipo
tipo_entire <- df[df$TipoAlquiler == "Entire home/apt",]
tipo_private <- df[df$TipoAlquiler == "Private room",]
tipo_compartido <- df[df$TipoAlquiler == "Shared room",]

#print(tipo_entire)
# Crear diagrama de cajas para cada tipo de alquiler
t_1 <-ggplot(tipo_entire, aes(y = Precio)) +
  geom_boxplot() +   ggtitle("Entire home/apt")


t_2 <-ggplot(tipo_private, aes(y = Precio)) +
  geom_boxplot() +
  ggtitle("Private room")

t_3 <-ggplot(tipo_compartido, aes(y = Precio)) +
  geom_boxplot() +
  ggtitle("Shared room")

grid.arrange(t_1, t_2,t_3, nrow = 1)


```

**Cual es el precio medio de alquiler de cada uno, la diferencia que hay ¿es estadísticamente significativa? ¿Con que test lo comprobarías?**

```{r}
# Crear una lista para almacenar los resultados de las pruebas de normalidad gausiana
normality_results <- list()

# Iterar a través de los grupos únicos en df$TipoAlquiler
for (tipo in levels(df$TipoAlquiler)) {
  df1 <- subset(df, TipoAlquiler == tipo)
  
  # Comprobar el tamaño de la muestra
  sample_size <- nrow(df1)
  if (sample_size >= 3 && sample_size <= 5000) {
    # Comprobar la normalidad con el test de Shapiro-Wilk
    shapiro_test <- shapiro.test(df1$Precio)
    
    # Verificar la normalidad
    if (shapiro_test$p.value >= 0.05) {
      # Si la distribución es normal, almacenar el resultado en la lista de resultados de normalidad
      normality_results[[tipo]] <- TRUE
    } else {
      # Si la distribución no es normal, almacenar el resultado en la lista de resultados de normalidad
      normality_results[[tipo]] <- FALSE
    }
  } else {
    print(paste("Grupo", tipo, "tiene un tamaño de muestra fuera del rango permitido. Se omite el análisis."))
  }
}

# Iterar nuevamente a través de los grupos únicos en df$TipoAlquiler
for (tipo in levels(df$TipoAlquiler)) {
  # Verificar si el grupo cumple con el tamaño de muestra y normalidad
  if (!is.null(normality_results[[tipo]])) {
    if (normality_results[[tipo]]) {
      df1 <- subset(df, TipoAlquiler == tipo)
      print(paste("Precio medio tipo", tipo, " = ", mean(df1$Precio, na.rm = TRUE)))
      sp <- shapiro.test(df1$Precio)
      print(paste(" - Test Shapiro p-valor = ", sp$p.value))
      
      # Realizar un test ANOVA ya que la distribución es normal
      anova_result <- anova(lm(Precio ~ TipoAlquiler, data = df1))
      print(paste(" - Test ANOVA p-valor = ", anova_result$`Pr(>F)`[1]))
    } else {
      print(paste("Grupo", tipo, "no sigue una distribución gaussiana. Se omite el análisis."))
    }
  }
}

# Realizar un test de kruskal para comparar las medias
kt <- kruskal.test(Precio ~ TipoAlquiler, df)

# Imprimir el resultado del test de kruskal
cat("Las medias son estadísticamente diferentes ya que el p-valor es muy bajo. p-valor=", kt$p.value)
```

Filtra el dataframe cuyos tipo de alquiler sea **'Entire home/apt'** y guardalo en un dataframe llamado ***airbnb_entire***. Estas serán las entradas que tienen un alquiler del piso completo.

```{r}
airbnb_entire <- subset(df, TipoAlquiler == "Entire home/apt")

```

¿Cuales son los 5 barrios que tienen un mayor número de apartamentos enteros en alquiler? **mas elementos**Nota: Mirar solo en airbnb_entire. A partir de este punto y hasta que se diga lo contrario partiremos de airbnb_entire.

```{r}

# Usar la función table para contar las frecuencias de cada barrio
barrios_tab<- table(airbnb_entire$Barrio)

# Ordenar las frecuencias en orden descendente y seleccionar los primeros 5
head(sort(barrios_tab, decreasing = TRUE), 5)


```

¿Cuales son los 5 barrios que tienen un mayor precio medio de alquiler para apartamentos enteros (es decir, del dataframe airbnb_entire)? ¿Cual es su precio medio?

Ayuda: Usa la función aggregate `aggregate(.~colname,df,mean,na.rm=TRUE)`

```{r}
precio_por_barrio <- aggregate(. ~Barrio, airbnb_entire[,c("Precio","Barrio")], FUN =mean, na.rm=FALSE)

precio_por_barrio <- aggregate(Precio ~Barrio, airbnb_entire, FUN =mean, na.rm=FALSE)

#print(precio_por_barrio)

precio_por_barrio<-aggregate(. ~ Barrio, airbnb_entire[c("Barrio","Precio")], mean,na.rm=TRUE)
dim(precio_por_barrio)
precio_por_barrio<-precio_por_barrio[order(precio_por_barrio$Precio,decreasing = T),]
head(precio_por_barrio,5)
barrios<-head(precio_por_barrio,5)$Barrio
```

¿Cuantos apartamentos hay en cada uno de esos barrios? Mostrar una dataframe con el nombre del barrio, el precio y el número de entradas. **dataframen nuevo**

Ayuda: Podeis crear un nuevo dataframe con las columnas "Barrio" y "Freq" que contenga el número de entradas en cada barrio y hacer un merge con el dataframe del punto anterior.

```{r}
# Contar el número de apartamentos en cada barrio
count_value <- as.data.frame(table(airbnb_entire$Barrio))
colnames(count_value) <- c("Barrio", "Freq")

# Combinar el número de apartamentos con el precio medio por barrio
mean_price <- merge(precio_por_barrio, count_value, by = "Barrio")

# Ordenar en orden descendente según el precio medio
mean_price <- mean_price[order(mean_price$Precio, decreasing = TRUE), ]

# Mostrar los 5 barrios con los precios medios más altos y su número de entradas
head(mean_price, 5)

```

Partiendo del dataframe anterior, muestra los 5 barrios con mayor precio, pero que tengan más de 100 entradas de alquiler.

```{r}

# Filtrar los barrios con más de 100 entradas
barrios_filtrados <- mean_price[mean_price$Freq > 100, ]

# Mostrar los 5 barrios con los precios más altos entre los filtrados
head(barrios_filtrados, 5)

```

**Dibuja** el diagrama de densidad de distribución de los diferentes precios. Serían 5 gráficas, una por cada barrio. Clase 4 -\> funciones R

ggplot geom -density(()

grup by barrio, son 5 graficas una encima de la otra

```{r}
library(ggplot2)
# Identificar los 5 barrios con más de 100 entradas
barrios <- head(subset(mean_price, mean_price$Freq > 100), 5)$Barrio

# Filtrar el dataframe original para incluir solo los 5 barrios seleccionados
subset_df <- subset(airbnb_entire, Barrio %in% barrios)

# Crear un gráfico de densidad separado para cada barrio
ggplot(data = subset_df, aes(x = Precio, color = Barrio)) +
  geom_density(bw = 5) +
  labs(title = "Diagrama de Densidad de Precios por Barrio",
       x = "Precio",
       y = "Densidad")




```

**Calcula el tamaño medio, en metros cuadrados, para los 5 barrios anteriores y muestralo en el mismo dataframe junto con el precio y número de entradas**

```{r}

# Calcular el tamaño medio en metros cuadrados por barrio
mean_size <- aggregate(. ~ Barrio, data = airbnb_entire[c("Barrio","MetrosCuadrados")], FUN = mean, na.rm=T)

# Combinar los dataframes de tamaño medio, precio y número de entradas
result_df <- merge(subset(mean_price, mean_price$Freq > 100), mean_size, by = "Barrio")

result_df<-result_df[order(result_df$Precio,decreasing = T),]
head(result_df,5)


```

Dibuja el diagrama de **densidad** de distribución de los diferentes tamaños de apartamentos. Serían 5 gráficas, una por cada barrio. ggplot tamano medio ggplo gor densiry grup by barrio

```{r}
datos_top5<-subset(airbnb_entire,Barrio %in% barrios)
# Crear las gráficas de densidad por barrio
ggplot(datos_top5, aes(x = MetrosCuadrados, color = Barrio)) +
  geom_density(alpha = 0.5)# +

```

Esta claro que las medias de metros cuadrados de cada uno de estos 5 barrios parecen ser diferentes, pero ¿son estadísticamente diferentes? ¿Que test habría que usar para comprobarlo? **cuantos grupo, es gausiano, aov**

```{r}
#Selecciona los datos solo para los 5 barrios principales.
datos_top5<-subset(airbnb_entire,Barrio %in% barrios)
#para cada uno de estos 5 barrios, se calcula el precio medio de los metros cuadrados y se realiza una prueba de normalidad de Shapiro-Wilk para verificar si los datos siguen una distribución gaussiana.
for (barrio in unique(datos_top5$Barrio)){
    df<-datos_top5[which(datos_top5$Barrio==as.character(barrio)),]
    print(paste("Precio medio tipo",barrio," = ",mean(df$MetrosCuadrados,na.rm=T)))
    if (nrow(df)>5000){
        df<-df[1:5000,]
    }
    sp<-shapiro.test(df$MetrosCuadrados)
    print(paste(" - Test shapiro pvalor = ",sp$p.value))
}
#los datos no siguen una distribución gaussiana, para determinar si hay diferencias estadísticamente significativas entre los barrios en términos del tamaño de los apartamentos
kt<-kruskal.test(MetrosCuadrados~Barrio,datos_top5)
#no hay evidencia suficiente para determinar que los tamaños de los apartamentos son diferentes en estos barrios
kt
paste("El pvalor del test es ",kt$p.value)

# la variabilidad observada en los tamaños de los apartamentos podría deberse al azar y no a diferencias reales entre los barrios.
```

Para únicamente los pisos de alquiler en el barrio de Sol:

`barrio_sol<-subset(airbnb_entire,Barrio=="Sol")`

Calcular un modelo lineal que combine alguna de estas variables: \* NumBanyos \* NumDormitorios \* MaxOcupantes \* MetrosCuadrados.

Primero calculamos la correlación para ver como se relacionan estas variables entre sí. **corr**

Se observa que la correlación entre el número de dormitorios y los metros cuadrados es sorprendentemente baja. ¿Son de fiar esos números?

Mediante un histograma o curvas de densidad podemos descartar números que notienen sentido en el dataframe barrio_sol, para tener una matriz de correlación que tenga mayor sentido.

```{r}
# Filtrar el dataframe para el barrio de Sol
barrio_sol <- subset(airbnb_entire, Barrio == "Sol")

# Seleccionar las variables de interés
variables <- c("NumBanyos", "NumDormitorios", "MaxOcupantes", "MetrosCuadrados")

# Calcular la matriz de correlación
corr <- cor(barrio_sol[variables],use="pairwise.complete.obs")

# Imprimir la matriz de correlación
print(corr)

# Explorar los datos con histogramas 
par(mfrow = c(2, 2))  # Crear un diseño de subgráficos 2x2

for (variable in variables) {
  hist(barrio_sol[[variable]], main = paste("Histograma de", variable), xlab = variable)
}

# Restablecer el diseño de los gráficos
par(mfrow = c(1, 1))


```

```{r}
#Mirando el histograma de metros cuadrados empiezan desde 0 metros cuadrado, tal vez no se deberian tener en cuenta esos datos
barrio_sol<-subset(barrio_sol, MetrosCuadrados>30)
# Calcular la matriz de correlación
corr <- cor(barrio_sol[variables],use="pairwise.complete.obs")
print(corr) #con el valor alto de 0.81 parece una mejor relacion
```

Una vez que hayamos filtrado los datos correspondientes calcular el valor o la combinación de valores que mejor nos permite obtener el precio de un inmueble.

```{r}

# Crear un modelo de regresión lineal 
modelo <- lm(barrio_sol,formula=Precio~MetrosCuadrados)

# Resumen del modelo
print(summary(modelo))

# Crear un modelo de regresión lineal 
modelo <- lm(barrio_sol,formula=Precio~NumBanyos)

# Resumen del modelo
print(summary(modelo))

# Crear un modelo de regresión lineal 
modelo <- lm(barrio_sol,formula=Precio~NumDormitorios ) 

# Resumen del modelo
print(summary(modelo))

# Crear un modelo de regresión lineal 
modelo <- lm(barrio_sol,formula=Precio~MaxOcupantes  )

# Resumen del modelo
print(summary(modelo))
```

```{r}

# Crear un modelo de regresión lineal múltiple
modelo <- lm(barrio_sol,formula=Precio~MetrosCuadrados+NumBanyos)

# Resumen del modelo
print(summary(modelo))

# Crear un modelo de regresión lineal múltiple
modelo <- lm(barrio_sol,formula=Precio~MetrosCuadrados+NumDormitorios)

# Resumen del modelo
print(summary(modelo))

# Crear un modelo de regresión lineal múltiple
modelo <- lm(barrio_sol,formula=Precio~MetrosCuadrados+NumBanyos+NumDormitorios)

# Resumen del modelo
print(summary(modelo))

# Crear un modelo de regresión lineal múltiple
modelo <- lm(barrio_sol,formula=Precio~NumBanyos+NumDormitorios+MetrosCuadrados+MaxOcupantes)

# Resumen del modelo
print(summary(modelo))

```

¿Que variable es más fiable para conocer el precio de un inmueble, el número de habitaciones o los metros cuadrados? **pvalor mas estrellitas p valor bajo**

```{r}

# parece que el número de dormitorios (NumDormitorios) es más confiable para predecir el precio de un inmueble en el barrio de Sol, ya que es un predictor significativo en todos los modelos y tiene un mayor impacto en el precio en comparación con los metros cuadrados.
```

Responde con su correspondiente margen de error del 95%, ¿cuantos euros incrementa el precio del alquiler por cada metro cuadrado extra del piso? **precio en funcion de metros cuadrado -\> confint(lm(precio-metro2,df))**

```{r}

# Ajustar el modelo de regresión lineal simple
modelo <- lm(barrio_sol, formula=Precio ~ MetrosCuadrados)

# Calcular el intervalo de confianza del 95% para el coeficiente de MetrosCuadrados
intervalo_confianza <- confint(modelo)

# Mostrar el intervalo de confianza
intervalo_confianza

#los metros cuadrados tienen un efecto significativo en el precio del alquiler en el conjunto de datos y se espera un aumento significativo en el precio por cada metro cuadrado adicional del piso
```

Responde con su correspondiente margen de error del 95%, ¿cuantos euros incrementa el precio del alquiler por cada habitación?

**confint(lm(precio-habitacion,df))**

```{r}

# Ajustar el modelo de regresión lineal simple
modelo <- lm(barrio_sol, formula=Precio ~ NumDormitorios)

# Calcular el intervalo de confianza del 95% para el coeficiente de NumDormitorios
intervalo_confianza <- confint(modelo)

# Mostrar el intervalo de confianza
intervalo_confianza
#el número de dormitorios tiene un efecto significativo en el precio del alquiler en el conjunto de datos y se espera un aumento significativo en el precio por cada dormitorio adicional en el piso
```

¿Cual es la probabilidad de encontrar, en el barrio de Sol, un apartamento en alquiler con 3 dormitorios? ¿Cual es el intervalo de confianza de esa probabilidad?

```{r}
# Calcular la probabilidad directamente
probabilidad <- sum(barrio_sol$NumDormitorios == 3) / nrow(barrio_sol)

# Calcular el intervalo de confianza usando binom.test
intervalo_confianza <- binom.test(sum(barrio_sol$NumDormitorios == 3), nrow(barrio_sol))$conf.int

# Mostrar la probabilidad y el intervalo de confianza
print(paste("La probabilidad es:", probabilidad))
print("El margen de confianza es:")
print(intervalo_confianza)

#la probabilidad de encontrar un apartamento en alquiler con 3 dormitorios en el barrio de Sol es del 10.71%.
#la confianza del 95%, podemos encontrar un apartamento con 3 dormitorios en el barrio de Sol  dentro de este intervalo(2.27%) hasta (28.23%).
```
